/******************************************************************************
 *    Copyright (c) Open Connectivity Foundation (OCF) and AllJoyn Open
 *    Source Project (AJOSP) Contributors and others.
 *
 *    SPDX-License-Identifier: Apache-2.0
 *
 *    All rights reserved. This program and the accompanying materials are
 *    made available under the terms of the Apache License, Version 2.0
 *    which accompanies this distribution, and is available at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Copyright (c) Open Connectivity Foundation and Contributors to AllSeen
 *    Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for
 *    any purpose with or without fee is hereby granted, provided that the
 *    above copyright notice and this permission notice appear in all
 *    copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 *    WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 *    WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 *    AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 *    DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 *    PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 *    TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *    PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

// This file is automatically generated. Do not edit it.

#include <alljoyn/cdm/common/LogModule.h>
#include <alljoyn/cdm/common/CdmTypes.h>
#include <alljoyn/cdm/controller/InterfaceController.h>
#include <interfaces/controller/userinterfacesettings/TimeDisplayIntfControllerListener.h>
#include <interfaces/controller/userinterfacesettings/TimeDisplayIntfController.h>

using namespace qcc;
using namespace std;

namespace ajn {
namespace services {
//======================================================================

typedef Ref<TimeDisplayIntfControllerListener> MyInterfaceListener;


class TimeDisplayIntfController::Impl : public InterfaceController
{
  public:

    Impl(
        TimeDisplayIntfController& outer,
        BusAttachment& busAttachment,
        MyInterfaceListener listener,
        Ref<ProxyBusObject> proxyBusObject
        )
      : InterfaceController(proxyBusObject),
        m_outer(outer),
        m_busAttachment(busAttachment),
        m_interfaceListener(listener)
    {
    }

    QStatus Init();

    const char* GetInterfaceName() const
    {
        return m_outer.GetInterfaceName().c_str();
    }

    QStatus GetDisplayTimeFormat(void* context);
    QStatus SetDisplayTimeFormat(const uint8_t value, void* context);
    QStatus GetSupportedDisplayTimeFormats(void* context);


    void PropertiesChanged(ProxyBusObject& obj, const char* ifaceName, const MsgArg& changed, const MsgArg& invalidated, void* context);

    void GetDisplayTimeFormatPropertyCB(QStatus status, ProxyBusObject* obj, const MsgArg& value, void* context);
    void SetDisplayTimeFormatPropertyCB(QStatus status, ProxyBusObject* obj, void* context);
    void GetSupportedDisplayTimeFormatsPropertyCB(QStatus status, ProxyBusObject* obj, const MsgArg& value, void* context);



    // The outer facet
    TimeDisplayIntfController& m_outer;

    // and inherit m_proxyObject from InterfaceController
    BusAttachment& m_busAttachment;
    MyInterfaceListener m_interfaceListener;
};

//======================================================================

QStatus TimeDisplayIntfController::Impl::Init()
{
    auto status = m_proxyObject->RegisterPropertiesChangedListener(GetInterfaceName(), NULL, 0, *this, NULL);

    if (ER_OK != status) {
        QCC_LogError(status, ("%s: RegisterPropertiesChangedListener failed.", __func__));
    }

    const InterfaceDescription* intf = m_outer.GetInterfaceDescription();
    if (intf) {
    } else {
        status = ER_FAIL;
        QCC_LogError(status, ("%s: The interface description does not exist.", __func__));
    }

    return status;
}




QStatus TimeDisplayIntfController::Impl::GetDisplayTimeFormat(void* context)
{
    auto status = m_proxyObject->GetPropertyAsync(GetInterfaceName(), s_prop_DisplayTimeFormat.c_str(), this,
                (ProxyBusObject::Listener::GetPropertyCB)&TimeDisplayIntfController::Impl::GetDisplayTimeFormatPropertyCB, context);
    return status;
}

QStatus TimeDisplayIntfController::Impl::SetDisplayTimeFormat(const uint8_t value, void* context)
{
    MsgArg arg;
    {
        CdmMsgCvt<uint8_t> converter;
        converter.set(arg, value);
    }

    auto status = m_proxyObject->SetPropertyAsync(GetInterfaceName(), s_prop_DisplayTimeFormat.c_str(), arg, this,
                (ProxyBusObject::Listener::SetPropertyCB)&TimeDisplayIntfController::Impl::SetDisplayTimeFormatPropertyCB, context);
    return status;
}

QStatus TimeDisplayIntfController::Impl::GetSupportedDisplayTimeFormats(void* context)
{
    auto status = m_proxyObject->GetPropertyAsync(GetInterfaceName(), s_prop_SupportedDisplayTimeFormats.c_str(), this,
                (ProxyBusObject::Listener::GetPropertyCB)&TimeDisplayIntfController::Impl::GetSupportedDisplayTimeFormatsPropertyCB, context);
    return status;
}





void TimeDisplayIntfController::Impl::PropertiesChanged(ProxyBusObject& obj, const char* ifaceName, const MsgArg& changed, const MsgArg& invalidated, void* context)
{
    MsgArg* entries;
    size_t numEntries;

    changed.Get("a{sv}", &numEntries, &entries);
    for (size_t i = 0; i < numEntries; ++i) {
        const char* propName;
        MsgArg* propValue;
        entries[i].Get("{sv}", &propName, &propValue);
        String propNameStr(propName);

        if (s_prop_DisplayTimeFormat == propNameStr) {
            uint8_t val;
            {
                CdmMsgCvt<uint8_t> converter;
                converter.get((*propValue), val);
            }
            m_interfaceListener->OnDisplayTimeFormatChanged(obj.GetPath(), val);
        } else if (s_prop_SupportedDisplayTimeFormats == propNameStr) {
            std::vector<uint8_t> val;
            {
                CdmMsgCvt<std::vector<uint8_t>> converter;
                converter.get((*propValue), val);
            }
            m_interfaceListener->OnSupportedDisplayTimeFormatsChanged(obj.GetPath(), val);
        } else {
            QCC_DbgTrace(("Unknown property change signal received"));
        }
    }
}

//======================================================================
// Callbacks


void TimeDisplayIntfController::Impl::GetDisplayTimeFormatPropertyCB(QStatus status, ProxyBusObject* obj, const MsgArg& value, void* context)
{
    if (obj) {
        uint8_t val;
        {
            CdmMsgCvt<uint8_t> converter;
            converter.get(value, val);
        }
        if (_QCC_DbgPrintCheck(DBG_GEN_MESSAGE, QCC_MODULE)) {
            auto s = CdmMsgCvt<uint8_t>().str(value);
            QCC_DbgPrintf(("%s: received property %s=%s", __func__, "DisplayTimeFormat", s.c_str()));
        }
        m_interfaceListener->OnResponseGetDisplayTimeFormat(status, obj->GetPath(), val, context);
    }
}



void TimeDisplayIntfController::Impl::SetDisplayTimeFormatPropertyCB(QStatus status, ProxyBusObject* obj, void* context)
{
    QCC_DbgPrintf(("%s: set completed", __func__));
    if (obj) {
        m_interfaceListener->OnResponseSetDisplayTimeFormat(status, obj->GetPath(), context);
    }
}

void TimeDisplayIntfController::Impl::GetSupportedDisplayTimeFormatsPropertyCB(QStatus status, ProxyBusObject* obj, const MsgArg& value, void* context)
{
    if (obj) {
        std::vector<uint8_t> val;
        {
            CdmMsgCvt<std::vector<uint8_t>> converter;
            converter.get(value, val);
        }
        if (_QCC_DbgPrintCheck(DBG_GEN_MESSAGE, QCC_MODULE)) {
            auto s = CdmMsgCvt<std::vector<uint8_t>>().str(value);
            QCC_DbgPrintf(("%s: received property %s=%s", __func__, "SupportedDisplayTimeFormats", s.c_str()));
        }
        m_interfaceListener->OnResponseGetSupportedDisplayTimeFormats(status, obj->GetPath(), val, context);
    }
}




//======================================================================
// Forward to the impl

TimeDisplayIntfController::TimeDisplayIntfController(
    BusAttachment& busAttachment,
    Ref<InterfaceControllerListener> listener,
    Ref<ProxyBusObject> cdmProxyObject
    )
  : m_impl(new Impl(*this, busAttachment, dynamic_pointer_cast<TimeDisplayIntfControllerListener>(listener), cdmProxyObject))
{
}



TimeDisplayIntfController::~TimeDisplayIntfController()
{
    delete m_impl;
}



Ref<CdmInterface> TimeDisplayIntfController::CreateInterface(BusAttachment& busAttachment, Ref<InterfaceControllerListener> listener, Ref<ProxyBusObject> cdmProxyObject)
{
    return mkRef<TimeDisplayIntfController>(busAttachment, dynamic_pointer_cast<TimeDisplayIntfControllerListener>(listener), cdmProxyObject);
}



QStatus TimeDisplayIntfController::Init()
{
    // Call the superclass Init
    QStatus status = CdmInterface::Init();
    if (ER_OK != status) {
        QCC_LogError(status, ("%s: Interface init failed.", __func__));
        return status;
    }

    return m_impl->Init();
}



BusAttachment& TimeDisplayIntfController::GetBusAttachment() const
{
    return m_impl->m_busAttachment;
}



QStatus TimeDisplayIntfController::GetDisplayTimeFormat(void* context)
{
    return m_impl->GetDisplayTimeFormat(context);
}



QStatus TimeDisplayIntfController::SetDisplayTimeFormat(const uint8_t value, void* context)
{
    return m_impl->SetDisplayTimeFormat(value, context);
}



QStatus TimeDisplayIntfController::GetSupportedDisplayTimeFormats(void* context)
{
    return m_impl->GetSupportedDisplayTimeFormats(context);
}

//======================================================================
} //namespace services
} //namespace ajn