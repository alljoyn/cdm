/******************************************************************************
 * Copyright (c) 2016 Open Connectivity Foundation (OCF) and AllJoyn Open
 *    Source Project (AJOSP) Contributors and others.
 *
 *    SPDX-License-Identifier: Apache-2.0
 *
 *    All rights reserved. This program and the accompanying materials are
 *    made available under the terms of the Apache License, Version 2.0
 *    which accompanies this distribution, and is available at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Copyright 2016 Open Connectivity Foundation and Contributors to
 *    AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for
 *    any purpose with or without fee is hereby granted, provided that the
 *    above copyright notice and this permission notice appear in all
 *    copies.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 *     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 *     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
 *     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 *     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 *     PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 *     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *     PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

// This file is automatically generated. Do not edit it.

#ifndef ALERTSINTERFACE_H_
#define ALERTSINTERFACE_H_

#include <qcc/String.h>
#include <alljoyn/Status.h>
#include <alljoyn/cdm/common/CdmInterface.h>
#include <alljoyn/cdm/util/CdmMsgCvt.h>

namespace ajn {
namespace services {

/**
 * Alerts Interface class
 */
class AlertsInterface : public CdmInterface {
  public:
    static const char* const INTERFACE_NAME;
    static const CdmInterfaceType INTERFACE_TYPE;
    enum Severity {
        SEVERITY_WARNING = 0,
        SEVERITY_ALARM = 1,
        SEVERITY_FAULT = 2,
    };

    struct AlertRecord {
        AlertsInterface::Severity severity;
        uint16_t alertCode;
        bool needAcknowledgement;

        inline bool operator==(const AlertRecord& a) {
            return a.severity==severity && a.alertCode==alertCode && a.needAcknowledgement==needAcknowledgement;
        }
    };
    struct AlertCodesDescriptor {
        uint16_t alertCode;
        qcc::String description;

        inline bool operator==(const AlertCodesDescriptor& a) {
            return a.alertCode==alertCode && a.description==description;
        }
    };

    /**
     * Constructor of AlertsInterface
     */
    AlertsInterface() {}

    /**
     * Destructor of AlertsInterface
     */
    virtual ~AlertsInterface() {}

    /**
     * Get Interface Type
     * @return interface type
     */
    const CdmInterfaceType GetInterfaceType() const { return ALERTS_INTERFACE; }

    /**
     * Get Introspection XML
     * @return Introspection XML
     */
    virtual const qcc::String& GetIntrospectionXml() { return s_xml; }

    /**
     * Get Interface version
     * @return Interface version
     */
    virtual const uint16_t GetInterfaceVersion() const { return s_interfaceVersion; }

  protected:
    static const qcc::String s_prop_Version;
    static const qcc::String s_prop_Alerts;
    static const qcc::String s_method_GetAlertCodesDescription;
    static const qcc::String s_method_AcknowledgeAlert;
    static const qcc::String s_method_AcknowledgeAllAlerts;

  private:
    static const qcc::String s_xml;
    static const uint16_t s_interfaceVersion;
};

// Enum converters



template<>
struct CdmMsgCvt<AlertsInterface::Severity>
{
    void get(const MsgArg& msgarg, AlertsInterface::Severity& value)
    {
        int32_t v;
        msgarg.Get("i", &v);
        value = static_cast<AlertsInterface::Severity>(v);
    }

    void set(MsgArg& msgarg, AlertsInterface::Severity value)
    {
        int32_t v = static_cast<int32_t>(value);
        msgarg.Set("i", v);
    }

    std::string str(const MsgArg& msgarg)
    {
        std::ostringstream strm;
        int32_t value;
        msgarg.Get("i", &value);
        strm << value;
        return strm.str();
    }
};

template<>
struct CdmMsgCvt<std::vector<AlertsInterface::Severity>>
{
    void get(const MsgArg& msgarg, std::vector<AlertsInterface::Severity>& value)
    {
        int32_t* v;
        size_t l;

        msgarg.Get("ai", &l, &v);
        value.resize(l);

        for (size_t i = 0; i < l; ++i)
        {
            value[i] = static_cast<AlertsInterface::Severity>(v[i]);
        }
    }

    void set(MsgArg& msgarg, const std::vector<AlertsInterface::Severity>& value)
    {
        size_t l = value.size();
        std::vector<int32_t> ints(l);

        for (size_t i = 0; i < l; ++i)
        {
            ints[i] = static_cast<int32_t>(value[i]);
        }

        msgarg.Set("ai", ints.size(), ints.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::ostringstream strm;
        int32_t* v;
        size_t l;
        msgarg.Get("ai", &l, &v);
        for (size_t i = 0; i < l; ++i)
        {
            strm << v[i] << "\n";
        }
        return strm.str();
    }
};

// Struct converters
template<>
struct CdmMsgCvt<AlertsInterface::AlertRecord>
{
    void get(const MsgArg& msgarg, AlertsInterface::AlertRecord& value)
    {
        int32_t severity;
        uint16_t alertCode;
        bool needAcknowledgement;
        msgarg.Get("(iqb)", &severity, &alertCode, &needAcknowledgement);
        value.severity = static_cast<AlertsInterface::Severity>(severity);
        value.alertCode = alertCode;
        value.needAcknowledgement = needAcknowledgement;
    }

    void set(MsgArg& msgarg, const AlertsInterface::AlertRecord value)
    {
        int32_t severity = value.severity;
        uint16_t alertCode = value.alertCode;
        bool needAcknowledgement = value.needAcknowledgement;
        msgarg.Set("(iqb)", severity, alertCode, needAcknowledgement);
    }

    std::string str(const MsgArg& msgarg)
    {
        AlertsInterface::AlertRecord value;
        get(msgarg, value);

        std::ostringstream strm;
        strm << "severity=" << value.severity;
        strm << " ";
        strm << "alertCode=" << value.alertCode;
        strm << " ";
        strm << "needAcknowledgement=" << value.needAcknowledgement;
        return strm.str();
    }
};


template<>
struct CdmMsgCvt<std::vector<AlertsInterface::AlertRecord>>
{
    void get(const MsgArg& msgarg, std::vector<AlertsInterface::AlertRecord>& value)
    {
        MsgArg* elems;
        size_t  num;

        msgarg.Get("a(iqb)", &num, &elems);
        value.resize(num);

        for (size_t i = 0; i < num; ++i)
        {
            int32_t severity;
            uint16_t alertCode;
            bool needAcknowledgement;
            elems[i].Get("(iqb)", &severity, &alertCode, &needAcknowledgement);
            value[i].severity = static_cast<AlertsInterface::Severity>(severity);
            value[i].alertCode = alertCode;
            value[i].needAcknowledgement = needAcknowledgement;
        }
    }

    void set(MsgArg& msgarg, const std::vector<AlertsInterface::AlertRecord>& value)
    {
        size_t num = value.size();
        std::vector<MsgArg> elems(num);

        for (size_t i = 0; i < num; ++i)
        {
            int32_t severity = value[i].severity;
            uint16_t alertCode = value[i].alertCode;
            bool needAcknowledgement = value[i].needAcknowledgement;
            elems[i].Set("(iqb)", severity, alertCode, needAcknowledgement);
        }

        msgarg.Set("a(iqb)", num, elems.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::vector<AlertsInterface::AlertRecord> vec;
        get(msgarg, vec);

        std::ostringstream strm;

        for (auto& v : vec)
        {
            strm << "{";
            strm << "severity=" << v.severity;
            strm << " ";
            strm << "alertCode=" << v.alertCode;
            strm << " ";
            strm << "needAcknowledgement=" << v.needAcknowledgement;
            strm << "}";
        }

        return strm.str();
    }
};

template<>
struct CdmMsgCvt<AlertsInterface::AlertCodesDescriptor>
{
    void get(const MsgArg& msgarg, AlertsInterface::AlertCodesDescriptor& value)
    {
        uint16_t alertCode;
        const char* description;
        msgarg.Get("(qs)", &alertCode, &description);
        value.alertCode = alertCode;
        value.description = description;
    }

    void set(MsgArg& msgarg, const AlertsInterface::AlertCodesDescriptor value)
    {
        uint16_t alertCode = value.alertCode;
        const char* description = value.description.c_str();
        msgarg.Set("(qs)", alertCode, description);
    }

    std::string str(const MsgArg& msgarg)
    {
        AlertsInterface::AlertCodesDescriptor value;
        get(msgarg, value);

        std::ostringstream strm;
        strm << "alertCode=" << value.alertCode;
        strm << " ";
        strm << "description=" << value.description;
        return strm.str();
    }
};


template<>
struct CdmMsgCvt<std::vector<AlertsInterface::AlertCodesDescriptor>>
{
    void get(const MsgArg& msgarg, std::vector<AlertsInterface::AlertCodesDescriptor>& value)
    {
        MsgArg* elems;
        size_t  num;

        msgarg.Get("a(qs)", &num, &elems);
        value.resize(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t alertCode;
            const char* description;
            elems[i].Get("(qs)", &alertCode, &description);
            value[i].alertCode = alertCode;
            value[i].description = description;
        }
    }

    void set(MsgArg& msgarg, const std::vector<AlertsInterface::AlertCodesDescriptor>& value)
    {
        size_t num = value.size();
        std::vector<MsgArg> elems(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t alertCode = value[i].alertCode;
            const char* description = value[i].description.c_str();
            elems[i].Set("(qs)", alertCode, description);
        }

        msgarg.Set("a(qs)", num, elems.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::vector<AlertsInterface::AlertCodesDescriptor> vec;
        get(msgarg, vec);

        std::ostringstream strm;

        for (auto& v : vec)
        {
            strm << "{";
            strm << "alertCode=" << v.alertCode;
            strm << " ";
            strm << "description=" << v.description.c_str();
            strm << "}";
        }

        return strm.str();
    }
};


} //namespace services
} //namespace ajn

#endif /* ALERTSINTERFACE_H_ */