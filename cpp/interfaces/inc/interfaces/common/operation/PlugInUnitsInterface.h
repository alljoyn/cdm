/******************************************************************************
 * Copyright AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for any
 *    purpose with or without fee is hereby granted, provided that the above
 *    copyright notice and this permission notice appear in all copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

// This file is automatically generated. Do not edit it.

#ifndef PLUGINUNITSINTERFACE_H_
#define PLUGINUNITSINTERFACE_H_

#include <qcc/String.h>
#include <alljoyn/Status.h>
#include <alljoyn/cdm/common/CdmInterface.h>
#include <alljoyn/cdm/util/CdmMsgCvt.h>

namespace ajn {
namespace services {

/**
 * PlugInUnits Interface class
 */
class PlugInUnitsInterface : public CdmInterface {
  public:
    static const char* const INTERFACE_NAME;
    static const CdmInterfaceType INTERFACE_TYPE;
    struct PlugInInfo {
        qcc::String objectPath;
        uint32_t deviceId;
        bool pluggedIn;

        inline bool operator==(const PlugInInfo& a) {
            return a.objectPath==objectPath && a.deviceId==deviceId && a.pluggedIn==pluggedIn;
        }
    };

    /**
     * Constructor of PlugInUnitsInterface
     */
    PlugInUnitsInterface() {}

    /**
     * Destructor of PlugInUnitsInterface
     */
    virtual ~PlugInUnitsInterface() {}

    /**
     * Get Interface Type
     * @return interface type
     */
    const CdmInterfaceType GetInterfaceType() const { return PLUG_IN_UNITS_INTERFACE; }

    /**
     * Get Introspection XML
     * @return Introspection XML
     */
    virtual const qcc::String& GetIntrospectionXml() { return s_xml; }

    /**
     * Get Interface version
     * @return Interface version
     */
    virtual const uint16_t GetInterfaceVersion() const { return s_interfaceVersion; }

  protected:
    static const qcc::String s_prop_Version;
    static const qcc::String s_prop_PlugInUnits;

  private:
    static const qcc::String s_xml;
    static const uint16_t s_interfaceVersion;
};

// Enum converters

// Struct converters
template<>
struct CdmMsgCvt<PlugInUnitsInterface::PlugInInfo>
{
    void get(const MsgArg& msgarg, PlugInUnitsInterface::PlugInInfo& value)
    {
        const char* objectPath;
        uint32_t deviceId;
        bool pluggedIn;
        msgarg.Get("(oub)", &objectPath, &deviceId, &pluggedIn);
        value.objectPath = objectPath;
        value.deviceId = deviceId;
        value.pluggedIn = pluggedIn;
    }

    void set(MsgArg& msgarg, const PlugInUnitsInterface::PlugInInfo value)
    {
        const char* objectPath = value.objectPath.c_str();
        uint32_t deviceId = value.deviceId;
        bool pluggedIn = value.pluggedIn;
        msgarg.Set("(oub)", objectPath, deviceId, pluggedIn);
    }

    std::string str(const MsgArg& msgarg)
    {
        PlugInUnitsInterface::PlugInInfo value;
        get(msgarg, value);

        std::ostringstream strm;
        strm << "objectPath=" << value.objectPath;
        strm << " ";
        strm << "deviceId=" << value.deviceId;
        strm << " ";
        strm << "pluggedIn=" << value.pluggedIn;
        return strm.str();
    }
};


template<>
struct CdmMsgCvt<std::vector<PlugInUnitsInterface::PlugInInfo>>
{
    void get(const MsgArg& msgarg, std::vector<PlugInUnitsInterface::PlugInInfo>& value)
    {
        MsgArg* elems;
        size_t  num;

        msgarg.Get("a(oub)", &num, &elems);
        value.resize(num);

        for (size_t i = 0; i < num; ++i)
        {
            const char* objectPath;
            uint32_t deviceId;
            bool pluggedIn;
            elems[i].Get("(oub)", &objectPath, &deviceId, &pluggedIn);
            value[i].objectPath = objectPath;
            value[i].deviceId = deviceId;
            value[i].pluggedIn = pluggedIn;
        }
    }

    void set(MsgArg& msgarg, const std::vector<PlugInUnitsInterface::PlugInInfo>& value)
    {
        size_t num = value.size();
        std::vector<MsgArg> elems(num);

        for (size_t i = 0; i < num; ++i)
        {
            const char* objectPath = value[i].objectPath.c_str();
            uint32_t deviceId = value[i].deviceId;
            bool pluggedIn = value[i].pluggedIn;
            elems[i].Set("(oub)", objectPath, deviceId, pluggedIn);
        }

        msgarg.Set("a(oub)", num, elems.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::vector<PlugInUnitsInterface::PlugInInfo> vec;
        get(msgarg, vec);

        std::ostringstream strm;

        for (auto& v : vec)
        {
            strm << "{";
            strm << "objectPath=" << v.objectPath.c_str();
            strm << " ";
            strm << "deviceId=" << v.deviceId;
            strm << " ";
            strm << "pluggedIn=" << v.pluggedIn;
            strm << "}";
        }

        return strm.str();
    }
};


} //namespace services
} //namespace ajn

#endif /* PLUGINUNITSINTERFACE_H_ */
