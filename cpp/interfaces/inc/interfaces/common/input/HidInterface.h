/******************************************************************************
 * Copyright AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for any
 *    purpose with or without fee is hereby granted, provided that the above
 *    copyright notice and this permission notice appear in all copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

// This file is automatically generated. Do not edit it.

#ifndef HIDINTERFACE_H_
#define HIDINTERFACE_H_

#include <qcc/String.h>
#include <alljoyn/Status.h>
#include <alljoyn/cdm/common/CdmInterface.h>
#include <alljoyn/cdm/util/CdmMsgCvt.h>

namespace ajn {
namespace services {

/**
 * Hid Interface class
 */
class HidInterface : public CdmInterface {
  public:
    static const char* const INTERFACE_NAME;
    static const CdmInterfaceType INTERFACE_TYPE;
    struct InputEvent {
        uint16_t type;
        uint16_t code;
        int32_t value;

        inline bool operator==(const InputEvent& a) {
            return a.type==type && a.code==code && a.value==value;
        }
    };
    struct SupportedInputEvent {
        uint16_t type;
        uint16_t code;
        int32_t min;
        int32_t max;

        inline bool operator==(const SupportedInputEvent& a) {
            return a.type==type && a.code==code && a.min==min && a.max==max;
        }
    };

    /**
     * Constructor of HidInterface
     */
    HidInterface() {}

    /**
     * Destructor of HidInterface
     */
    virtual ~HidInterface() {}

    /**
     * Get Interface Type
     * @return interface type
     */
    const CdmInterfaceType GetInterfaceType() const { return HID_INTERFACE; }

    /**
     * Get Introspection XML
     * @return Introspection XML
     */
    virtual const qcc::String& GetIntrospectionXml() { return s_xml; }

    /**
     * Get Interface version
     * @return Interface version
     */
    virtual const uint16_t GetInterfaceVersion() const { return s_interfaceVersion; }

  protected:
    static const qcc::String s_prop_Version;
    static const qcc::String s_prop_SupportedEvents;
    static const qcc::String s_method_InjectEvents;

  private:
    static const qcc::String s_xml;
    static const uint16_t s_interfaceVersion;
};

// Enum converters

// Struct converters
template<>
struct CdmMsgCvt<HidInterface::InputEvent>
{
    void get(const MsgArg& msgarg, HidInterface::InputEvent& arg_)
    {
        uint16_t field_type{};
        uint16_t field_code{};
        int32_t field_value{};
        msgarg.Get("(qqi)", &field_type, &field_code, &field_value);
        arg_.type = field_type;
        arg_.code = field_code;
        arg_.value = field_value;
    }

    void set(MsgArg& msgarg, const HidInterface::InputEvent arg_)
    {
        uint16_t field_type = arg_.type;
        uint16_t field_code = arg_.code;
        int32_t field_value = arg_.value;
        msgarg.Set("(qqi)", field_type, field_code, field_value);
    }

    std::string str(const MsgArg& msgarg)
    {
        HidInterface::InputEvent arg_;
        get(msgarg, arg_);

        std::ostringstream strm;
        strm << "type=" << arg_.type;
        strm << " ";
        strm << "code=" << arg_.code;
        strm << " ";
        strm << "value=" << arg_.value;
        return strm.str();
    }
};


template<>
struct CdmMsgCvt<std::vector<HidInterface::InputEvent>>
{
    void get(const MsgArg& msgarg, std::vector<HidInterface::InputEvent>& arg_)
    {
        MsgArg* elems = 0;
        size_t  num = 0;

        msgarg.Get("a(qqi)", &num, &elems);
        arg_.resize(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t field_type{};
            uint16_t field_code{};
            int32_t field_value{};
            elems[i].Get("(qqi)", &field_type, &field_code, &field_value);
            arg_[i].type = field_type;
            arg_[i].code = field_code;
            arg_[i].value = field_value;
        }
    }

    void set(MsgArg& msgarg, const std::vector<HidInterface::InputEvent>& arg_)
    {
        size_t num = arg_.size();
        std::vector<MsgArg> elems(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t field_type = arg_[i].type;
            uint16_t field_code = arg_[i].code;
            int32_t field_value = arg_[i].value;
            elems[i].Set("(qqi)", field_type, field_code, field_value);
        }

        msgarg.Set("a(qqi)", num, elems.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::vector<HidInterface::InputEvent> vec;
        get(msgarg, vec);

        std::ostringstream strm;

        for (auto& v : vec)
        {
            strm << "{";
            strm << "type=" << v.type;
            strm << " ";
            strm << "code=" << v.code;
            strm << " ";
            strm << "value=" << v.value;
            strm << "}";
        }

        return strm.str();
    }
};

template<>
struct CdmMsgCvt<HidInterface::SupportedInputEvent>
{
    void get(const MsgArg& msgarg, HidInterface::SupportedInputEvent& arg_)
    {
        uint16_t field_type{};
        uint16_t field_code{};
        int32_t field_min{};
        int32_t field_max{};
        msgarg.Get("(qqii)", &field_type, &field_code, &field_min, &field_max);
        arg_.type = field_type;
        arg_.code = field_code;
        arg_.min = field_min;
        arg_.max = field_max;
    }

    void set(MsgArg& msgarg, const HidInterface::SupportedInputEvent arg_)
    {
        uint16_t field_type = arg_.type;
        uint16_t field_code = arg_.code;
        int32_t field_min = arg_.min;
        int32_t field_max = arg_.max;
        msgarg.Set("(qqii)", field_type, field_code, field_min, field_max);
    }

    std::string str(const MsgArg& msgarg)
    {
        HidInterface::SupportedInputEvent arg_;
        get(msgarg, arg_);

        std::ostringstream strm;
        strm << "type=" << arg_.type;
        strm << " ";
        strm << "code=" << arg_.code;
        strm << " ";
        strm << "min=" << arg_.min;
        strm << " ";
        strm << "max=" << arg_.max;
        return strm.str();
    }
};


template<>
struct CdmMsgCvt<std::vector<HidInterface::SupportedInputEvent>>
{
    void get(const MsgArg& msgarg, std::vector<HidInterface::SupportedInputEvent>& arg_)
    {
        MsgArg* elems = 0;
        size_t  num = 0;

        msgarg.Get("a(qqii)", &num, &elems);
        arg_.resize(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t field_type{};
            uint16_t field_code{};
            int32_t field_min{};
            int32_t field_max{};
            elems[i].Get("(qqii)", &field_type, &field_code, &field_min, &field_max);
            arg_[i].type = field_type;
            arg_[i].code = field_code;
            arg_[i].min = field_min;
            arg_[i].max = field_max;
        }
    }

    void set(MsgArg& msgarg, const std::vector<HidInterface::SupportedInputEvent>& arg_)
    {
        size_t num = arg_.size();
        std::vector<MsgArg> elems(num);

        for (size_t i = 0; i < num; ++i)
        {
            uint16_t field_type = arg_[i].type;
            uint16_t field_code = arg_[i].code;
            int32_t field_min = arg_[i].min;
            int32_t field_max = arg_[i].max;
            elems[i].Set("(qqii)", field_type, field_code, field_min, field_max);
        }

        msgarg.Set("a(qqii)", num, elems.data());
        msgarg.Stabilize();
    }

    std::string str(const MsgArg& msgarg)
    {
        std::vector<HidInterface::SupportedInputEvent> vec;
        get(msgarg, vec);

        std::ostringstream strm;

        for (auto& v : vec)
        {
            strm << "{";
            strm << "type=" << v.type;
            strm << " ";
            strm << "code=" << v.code;
            strm << " ";
            strm << "min=" << v.min;
            strm << " ";
            strm << "max=" << v.max;
            strm << "}";
        }

        return strm.str();
    }
};


} //namespace services
} //namespace ajn

#endif /* HIDINTERFACE_H_ */
