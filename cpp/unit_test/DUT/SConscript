# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
import subprocess

Import('cdm_env')

#include the cdm source
cdm_env.Append(CPPPATH = '../inc/alljoyn/cdm')

# Call this function to verify there is a valid developer license to run the unit test.
def have_developer_license():
    from ctypes import windll, byref, create_string_buffer
    have_valid_license = False
    try:
        filetime = create_string_buffer(8)    # buffer the size of a FILETIME structure
        if windll.wsclient.CheckDeveloperLicense(byref(filetime)) == 0:
            have_valid_license = True
    except:
        pass

    if not have_valid_license:
        print('Warning: No valid Windows Store developer license detected, unit tests will not be run.')
    return have_valid_license

def builder_check(target, source, env):
    check = str(source[0].abspath)
    return subprocess.call(check)

cdm_env.Append(BUILDERS = {'Check' : Builder(action = builder_check)})

if not cdm_env.has_key('GTEST_DIR'):
    print('GTEST_DIR not specified skipping CDM unit test build')

elif cdm_env['OS'] == 'darwin' and cdm_env['CPU'] in ['arm', 'armv7', 'armv7s', 'arm64',]:
    # do not even try Google test if darwin and arm
    print 'GTEST_DIR ignored when building for OS=darwin CPU=arm, skipping alljoyn_core unit test build'

else:
    cdm_gtest_env = cdm_env.Clone();
    gtest_dir = cdm_gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(cdm_gtest_env)

    if cdm_gtest_env['CXX'].startswith('clang'):
        # Suppress a clang warning in google-test code.
        cdm_gtest_env.Append(CPPFLAGS = ['-Wno-unused-private-field'])

    if gtest_dir == '/usr':
        gtest_src_base = '%s/src/gtest' % gtest_dir
    else:
        gtest_src_base = gtest_dir

    if cdm_gtest_env['OS_CONF'] == 'windows':
        # gTest does not require the same CPPDEFINES as AllJoyn core.
        cdm_gtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        # don't use the _DEBUG define unless the /MDd compiler flag is specified
        #cdm_gtest_env.Append(CPPDEFINES = ['WIN32', '_DEBUG', '_LIB'])
        cdm_gtest_env.Append(CXXFLAGS = ['/EHsc'])

    if cdm_gtest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        cdm_gtest_env.Append(CPPDEFINES = ['ANDROID'])

    # tr1::tuple is not avalible for android or darwin
    if cdm_gtest_env['OS_CONF'] == 'android' or cdm_gtest_env['OS_CONF'] == 'darwin':
        cdm_gtest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])

    # clone() library function is NOT available on android-x86
    if cdm_gtest_env['OS_CONF'] == 'android' and cdm_gtest_env['CPU'] == 'x86':
        cdm_gtest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])

    # we replace AllJoyn's include CPPPATH options.  AllJoyn includes stlport that will cause the
    # gTest code to not compile as expected at this time
    cdm_gtest_env.Append(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        cdm_gtest_env.Append(CPPPATH = [ cdm_gtest_env.Dir('$GTEST_DIR/include') ])

    gtest_obj = cdm_gtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    cdm_gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    cdm_unittest_env = cdm_env.Clone()

    if cdm_unittest_env['BR'] == 'on':
        # Build apps with bundled daemon support
        cdm_unittest_env.Prepend(LIBS = [cdm_unittest_env['ajrlib']])
    # Add private header include path to test bundled router code
    cdm_unittest_env.Append(CPPPATH = [ cdm_unittest_env.Dir('../router').srcnode() ])

    cdm_unittest_env.Append(CPPPATH = cdm_unittest_env.Dir('..').srcnode())

    gtest_dir = cdm_unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        cdm_unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    if cdm_unittest_env['OS_GROUP'] == 'windows':
       cdm_unittest_env.Append(CXXFLAGS = ['/EHsc'])

    # we compile with no rtti and we are not using exceptions.
    cdm_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])

    if cdm_unittest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        cdm_unittest_env.Append(CPPDEFINES = ['ANDROID'])

    # tr1::tuple is not avalible for android or darwin
    if cdm_unittest_env['OS_CONF'] == 'android' or cdm_unittest_env['OS_CONF'] == 'darwin':
        cdm_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    if cdm_unittest_env['OS_CONF'] == 'android' and cdm_unittest_env['CPU'] == 'x86':
        cdm_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    if cdm_unittest_env['OS_CONF'] == 'windows' and cdm_unittest_env['MSVC_VERSION'] == '11.0':
        cdm_unittest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])
    # gtest library file is placed on folder above the the object files.
    #cdm_unittest_env.Append(LIBPATH = ['./'])
    #did not work in CDM gtest was placed in ObjectDirectory
    cdm_unittest_env.Prepend(LIBPATH = ['.' , '../src'])


    cdm_unittest_env.Prepend(LIBS = ['gtest'])
    cdm_unittest_env.Prepend(LIBS = ['alljoyn_cdm'])

    cdmtest_src = cdm_unittest_env.Glob('*.cc') + cdm_unittest_env.Glob('environment/*.cc') + cdm_unittest_env.Glob('operation/*.cc') + cdm_unittest_env.Glob('input/*.cc') + cdm_unittest_env.Glob('userinterfacesettings/*.cc')
    if cdm_unittest_env['BR'] != 'on':
        # need to remove DiscoveryTest.cc from sources
        cdmtest_src = [l for l in cdm_unittest_env.Glob('*.cc') if not l.path.endswith('DiscoveryTest.cc')]

    cdmtest_obj = cdm_unittest_env.Object(cdmtest_src);
    cdmtest_prog = cdm_unittest_env.Program('cdmDeviceTest', cdmtest_obj)
    cdm_unittest_env.Install('$TESTDIR/cdm/bin', cdmtest_prog)

    cdm_unittest_env.Append(LIBPATH = [ '#' + '$OBJDIR_SERVICES_CDM/cpp/src' ])


#######  TODO Figure out how this is supposed to work
    # install gtest utilities
#    cdm_unittest_env.Install('$TESTDIR/cdm/bin', Dir('test_report').srcnode())



