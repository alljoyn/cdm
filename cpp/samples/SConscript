# 
# Copyright (c) 2016 Open Connectivity Foundation (OCF) and AllJoyn Open
#    Source Project (AJOSP) Contributors and others.
# 
#    SPDX-License-Identifier: Apache-2.0
# 
#    All rights reserved. This program and the accompanying materials are
#    made available under the terms of the Apache License, Version 2.0
#    which accompanies this distribution, and is available at
#    http://www.apache.org/licenses/LICENSE-2.0
# 
#    Copyright 2016 Open Connectivity Foundation and Contributors to
#    AllSeen Alliance. All rights reserved.
# 
#    Permission to use, copy, modify, and/or distribute this software for
#    any purpose with or without fee is hereby granted, provided that the
#    above copyright notice and this permission notice appear in all
#    copies.
# 
#     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
#     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
#     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
#     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
#     PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
#     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#     PERFORMANCE OF THIS SOFTWARE.

import json
import os.path

Import('cdm_env')

local_env = cdm_env.Clone()

local_env.Prepend(LIBS = ['alljoyn_cdm_interfaces', 'alljoyn_cdm_controllee', 'alljoyn_cdm_common', 'alljoyn_cdm_util', 'alljoyn_about' ])

if local_env['BR'] == 'on':
    # Build apps with bundled daemon support
    local_env.Append(LIBS = [local_env['ajrlib']])

# Sample programs

sample_dirs = [
    'LampDevice',
    'DeviceEmulator',
    'Migration/16.10/CookTopControllee'
    ]

exports = { 'env': local_env }

### install the sample launcher
samples_launcher_path = 'sample_launcher'
local_env.Install('$CDM_DISTDIR/bin/', samples_launcher_path + '/launch.py')

# Build the sys.conf file with the users abs path
cdm_bin_dir = Dir(local_env.subst('$CDM_DISTDIR/bin/')).abspath
cdm_mount_dir = cdm_bin_dir

services_path = os.path.dirname(Dir('#').abspath)
cdm_tcl_bin_dir = os.path.join(services_path, 'cdm_tcl', 'dist', 'bin')
cdm_tcl_mount_dir = cdm_tcl_bin_dir

sys_conf_data = {
    "cdm_tcl": {
        "bin_dir": cdm_tcl_bin_dir,
        "mount_dir": cdm_tcl_mount_dir
    },
    "cdm": {
        "bin_dir": cdm_bin_dir,
        "mount_dir": cdm_mount_dir
    }
}

sys_conf_path = File(local_env.subst('$CDM_DISTDIR/bin/cdm_os/conf/sys.conf')).abspath

if not os.path.exists(os.path.dirname(sys_conf_path)):
    os.makedirs(os.path.dirname(sys_conf_path))

# write the sys.conf file
with open(sys_conf_path, "w") as fp:
    json.dump(sys_conf_data, fp, indent=4)

local_env.Install('$CDM_DISTDIR/bin/cdm_os', local_env.Glob(samples_launcher_path + '/cdm_os/*.py'))
local_env.Install('$CDM_DISTDIR/bin/cdm_os/conf/cdm', local_env.Glob(samples_launcher_path + '/conf/cdm/*.conf'))
local_env.Install('$CDM_DISTDIR/bin/cdm_os/conf/cdm_tcl', local_env.Glob(samples_launcher_path + '/conf/cdm_tcl/*.conf'))
local_env.Install('$CDM_DISTDIR/bin/cdm_os/bin', local_env.Glob(samples_launcher_path + '/cdm_os/bin/*.py'))

### install some sample certificate files
local_env.Install('$CDM_DISTDIR/bin/certificates', local_env.Glob('certificates/*.*'))

### install some sample device xml files to use with device emulator
local_env.Install('$CDM_DISTDIR/bin/DeviceXML', local_env.Glob('DeviceXML/*.*'))


progs = [ local_env.SConscript('%s/SConscript' % sampleapp, exports = exports) for sampleapp in sample_dirs ]

Return('progs')

