# Copyright AllSeen Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for any
#    purpose with or without fee is hereby granted, provided that the above
#    copyright notice and this permission notice appear in all copies.
#
#    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Import('cdm_env')

if not cdm_env.has_key('_ALLJOYNCORE_'):
    cdm_env.Append(LIBS = ['alljoyn'])
    if cdm_env['BR'] == 'on' :
        brFile = cdm_env.subst('$DISTDIR') + '/cpp/lib/BundledRouter.o'
        cdm_env['brobj'] = File(brFile)
        cdm_env['ajrlib'] = 'ajrouter'
    if cdm_env['OS'] == 'openwrt':
        cdm_env.AppendUnique(LIBS = [ 'stdc++', 'pthread' ])

# Make cdm dist a sub-directory of the alljoyn dist.  This avoids any conflicts with alljoyn dist targets.
cdm_env['CDM_DISTDIR'] = cdm_env['DISTDIR'] + '/cdm'

cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm', cdm_env.Glob('inc/alljoyn/cdm/*.h'))
cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm/interfaces', cdm_env.Glob('inc/alljoyn/cdm/interfaces/*.h'))
cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm/interfaces/operation', cdm_env.Glob('inc/alljoyn/cdm/interfaces/operation/*.h'))
cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm/interfaces/environment', cdm_env.Glob('inc/alljoyn/cdm/interfaces/environment/*.h'))
cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm/interfaces/input', cdm_env.Glob('inc/alljoyn/cdm/interfaces/input/*.h'))
cdm_env.Install('$CDM_DISTDIR/inc/alljoyn/cdm/interfaces/userinterfacesettings', cdm_env.Glob('inc/alljoyn/cdm/interfaces/userinterfacesettings/*.h'))

# Libraries
cdm_env.Install('$CDM_DISTDIR/lib', cdm_env.SConscript('src/SConscript', exports = ['cdm_env']))

# Sample programs
if cdm_env['BUILD_CDM_SAMPLES'] == 'on':
    cdm_env.Install('$CDM_DISTDIR/bin', cdm_env.SConscript('samples/SConscript', exports = ['cdm_env']))

#Build Unit Tests
cdm_env.Install('$CDM_DISTDIR/cdm/bin', cdm_env.SConscript('unit_test/DUT/SConscript', exports = ['cdm_env']))
cdm_env.Install('$CDM_DISTDIR/cdm/bin', cdm_env.SConscript('unit_test/ServiceFramework/SConscript', exports = ['cdm_env']))

# Build docs
installDocs = cdm_env.SConscript('docs/SConscript', exports = ['cdm_env'])
cdm_env.Depends(installDocs, cdm_env.Glob('$CDM_DISTDIR/inc/alljoyn/cdm/*.h'));
