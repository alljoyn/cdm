{%- macro freeType(type, name) %}
{% if type.ajtypeIsString() %}
free((void*){{name}});
{% elif type.ajtypeIsArrayOfName() %}
Free{{type.tclArrayDescr()}}(&{{name}});
{% elif type.ajtypeStructName() %}
{# name must not be the pointer #}
FreeFields_{{type.ajtypeInterfaceName()}}_{{type.ajtypeStructName()}}(&{{name}});
{% endif %}
{% endmacro %}

{%- macro halCType(type) %}
{%-   if type.ajtypeIsEnum() %}{{type.tcltype(false)}}
{%- elif type.ajtypeStructName() %}{{type.ajtypeStructName(withIface = True, withArray = True)}}
{%- elif type.signature == "b" %}bool
{%- elif type.signature == "y" %}uint64_t
{%- elif type.signature == "n" %}int64_t
{%- elif type.signature == "q" %}uint64_t
{%- elif type.signature == "i" %}int64_t
{%- elif type.signature == "u" %}uint64_t
{%- elif type.signature == "x" %}int64_t
{%- elif type.signature == "t" %}uint64_t
{%- elif type.signature == "d" %}double
{%- elif type.signature == "s" %}char const*
{%- elif type.signature == "o" %}char const*
{%- else %}{{type.tcltype()}}
{%- endif %}
{% endmacro -%}

{%- macro unpackArgs(type, name) %}
{%- if type.ajtypeIsArray() %}{{name}}.elems, sizeof({{type.ajtypeIsArray(useAnnotated=False, returnType=True).tcltype()}}) * {{name}}.numElems{% else %}{{name}}{% endif -%}
{% endmacro -%}

{%- macro halInit(type) %}
{%-   if type.ajtypeIsString() %}""{%- else %}{0}{% endif %}
{% endmacro -%}

{%- macro castTo(type) %}
{%-   if type.ajtypeIsEnum() %}({{type.tcltype()}})(int){% endif %}
{% endmacro -%}
{%- macro castToPtr(type) %}
{%-   if type.ajtypeIsEnum() %}({{type.tcltype()}}*)(int*){% endif %}
{% endmacro -%}

{% macro halDecode(type, var, elem) %}
{% if type.ajtypeIsArray() %}
{{type.tclHalEncoder(decode = True)}}({{elem}}, &{{var}});
{% else %}
{{var}} = {{type.tclHalEncoder(decode = True)}}({{elem}});
{%- endif -%}
{% endmacro -%}

{%- macro unpackStructFields(structVarName, struct) %}
{%- for field in struct.Fields %}{{structVarName}}.elems[i].{{field.Name}}{% if not loop.last %}, {% endif %}{% endfor -%}
{% endmacro -%}
