/******************************************************************************
 * Copyright AllSeen Alliance. All rights reserved.
 *
 *    Permission to use, copy, modify, and/or distribute this software for any
 *    purpose with or without fee is hereby granted, provided that the above
 *    copyright notice and this permission notice appear in all copies.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 ******************************************************************************/

// This file is automatically generated. Do not edit it.

#ifndef {{Interface.Name.upper()}}INTFCONTROLLER_H_
#define {{Interface.Name.upper()}}INTFCONTROLLER_H_

#include <qcc/String.h>
#include <alljoyn/Status.h>
#include <alljoyn/cdm/common/CdmTypes.h>
#include <interfaces/common/{{Interface.Category}}/{{Interface.Name}}Interface.h>

namespace ajn {
namespace services {

/**
 * {{Interface.Name}} Interface Controller class
 */
class {{Interface.Name}}IntfController : public {{Interface.Name}}Interface {
  public:
    /**
     * The LSF translater inherits and redefines this class.
     * Also std:make_shared needs this to be public.
     */
    {{Interface.Name}}IntfController(
        BusAttachment& busAttachment,
        Ref<InterfaceControllerListener> listener,
        Ref<ProxyBusObject> cdmProxyObject
        );

    /**
     * Destructor of {{Interface.Name}}IntfController
     */
    virtual ~{{Interface.Name}}IntfController();

    /**
     * Create interface
     */
    static Ref<CdmInterface> CreateInterface(BusAttachment& busAttachment, Ref<InterfaceControllerListener> listener, Ref<ProxyBusObject> ProxyBusObject);

    /**
     * Initialize interface
     * @return status
     */
    virtual QStatus Init() override;

    virtual BusAttachment& GetBusAttachment() const override;


    {% for property in Interface.UserProperties %}

    /**
     * Get {{property.Name}} property
     {% if "en" in property.doc %}
     * ({{property.doc["en"]}})
     {% endif %}     * @param[in] context the context that is passed to the callback handler
     * @return ER_OK on success
     */
    virtual QStatus Get{{property.Name}}(void* context = NULL);
    {% if property.Writable %}

    /**
     * Set {{property.Name}} property
     {% if "en" in property.doc %}
     * ({{property.doc["en"]}})
     {% endif %}
     * @param[in] value The {{property.Name.add_spaces_lower()}} to set
     * @param[in] context the context that is passed to the callback handler
     * @return ER_OK on success
     */
    virtual QStatus Set{{property.Name}}(const {{property.Type.cpptype_arg()}} value, void* context = NULL);
    {% endif %}
    {% endfor %}
    {% for method in Interface.Methods %}
    {# TODO: This should only take input args #}

    /**
     * Call {{method.Name}} method
     {% if "en" in method.doc %}
     * ({{method.doc["en"]}})
     {% endif %}
     {% for arg in method.input_args() %}
     * @param[in] {{arg.Name.camel_case()}} {%if "en" in arg.doc%}{{arg.doc["en"]}}{%else%}Method argument{%endif%}

     {% endfor %}
     * @param[in] context the context that is passed to the callback handler
     * @return ER_OK on success
     */
    virtual QStatus {{method.Name}}({% for arg in method.input_args() %}const {{arg.Type.cpptype_arg()}} {{arg.Name.camel_case()}}, {% endfor %}void* context = NULL);
    {% endfor %}

  private:

    class Impl;

    Impl* m_impl;
};

} //namespace services
} //namespace ajn

#endif /* {{Interface.Name.upper()}}INTFCONTROLLER_H_ */
