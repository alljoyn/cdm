# # Copyright (c) Open Connectivity Foundation (OCF) and AllJoyn Open
#    Source Project (AJOSP) Contributors and others.
#
#    SPDX-License-Identifier: Apache-2.0
#
#    All rights reserved. This program and the accompanying materials are
#    made available under the terms of the Apache License, Version 2.0
#    which accompanies this distribution, and is available at
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Copyright (c) Open Connectivity Foundation and Contributors to AllSeen
#    Alliance. All rights reserved.
#
#    Permission to use, copy, modify, and/or distribute this software for
#    any purpose with or without fee is hereby granted, provided that the
#    above copyright notice and this permission notice appear in all
#    copies.
#
#     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
#     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
#     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
#     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
#     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
#     PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
#     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#     PERFORMANCE OF THIS SOFTWARE.
# 

Import('env', 'CheckCXXFlag')
import os

# Linux specific vars
vars = Variables()
vars.Add(BoolVariable('GCOV', 'Compile with gcov support', 'no'))
vars.Add(BoolVariable('ASAN', 'Enable Address Sanitizer runtime checks', 'no'))
vars.Add(BoolVariable('TSAN', 'Enable Thread Sanitizer runtime checks', 'no'))
vars.Update(env)

Help(vars.GenerateHelpText(env))

config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
if not config.CheckCXXFlag('-std=c++11'):
   if not config.CheckCXXFlag('-std=c++0x'):
      print '*** Compiler too old to build AllJoyn.  Aborting.'
      Exit(1)
env = config.Finish()

# Linux specific flags
env.Append(CPPDEFINES = ['QCC_OS_LINUX'])
env.Append(CPPDEFINES = ['_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC'])

env.Append(CFLAGS = ['-Wall',
                     '-Werror',
                     '-pipe',
                     '-std=c99',
                     '-fno-strict-aliasing',
                     '-fno-asynchronous-unwind-tables',
                     '-fno-unwind-tables',
                     '-ffunction-sections',
                     '-fdata-sections',
                     '-Wno-long-long',
                     '-Wunused-parameter'])

env.Append(CXXFLAGS = ['-Wall',
                       '-Werror',
                       '-Werror=vla',
                       '-pipe',
                       '-fno-strict-aliasing',
                       '-fno-asynchronous-unwind-tables',
                       '-fno-unwind-tables',
                       '-ffunction-sections',
                       '-fdata-sections',
                       '-Wno-long-long',
                       '-Wno-deprecated',
                       '-Wno-unknown-pragmas',
                       '-Wno-unused-parameter'])

env.Append(JAVACFLAGS = ['-Xlint', '-Xlint:-serial'])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS = '-g')
   env.Append(CXXFLAGS = '-g')
   env.Append(JAVACFLAGS = '-g')
else:
   env.Append(CFLAGS = '-Os')
   env.Append(CXXFLAGS = '-Os')
   env.Append(LINKFLAGS = ['-s', '-Wl,--gc-sections'])

if (env['VARIANT'] == 'debug' and env['TSAN'] == 'no' ):
   env.Append(CPPDEFINES = ['_GLIBCXX_DEBUG', '_GLIBCXX_DEBUG_PEDANTIC'])

# Code coverage control
if env['GCOV']:
    env.Append(CCFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
    env.Append(LIBS = ['gcov'])

# Address sanitizer control
if env['ASAN']:
   env.Append(CFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(CXXFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(LINKFLAGS = '-fsanitize=address')

env.SConscript('${CPU}/SConscript')

env.AppendUnique(LIBS =['rt', 'stdc++', 'pthread', 'm'])
if env['CRYPTO'] == 'openssl':
    env.AppendUnique(LIBS =['crypto', 'ssl'])
    print 'Using OpenSSL crypto'
else:
    print 'Using builtin crypto'